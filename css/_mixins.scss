$prefix-for-webkit:    true !default;
$prefix-for-mozilla:   true !default;
$prefix-for-microsoft: true !default;
$prefix-for-opera:     true !default;
$prefix-for-spec:      true !default; // required for keyframe mixin

@mixin prefixer ($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    @if $prefix == webkit {
      @if $prefix-for-webkit {
        -webkit-#{$property}: $value;
      }
    }
    @else if $prefix == moz {
      @if $prefix-for-mozilla {
        -moz-#{$property}: $value;
      }
    }
    @else if $prefix == ms {
      @if $prefix-for-microsoft {
        -ms-#{$property}: $value;
      }
    }
    @else if $prefix == o {
      @if $prefix-for-opera {
        -o-#{$property}: $value;
      }
    }
    @else if $prefix == spec {
      @if $prefix-for-spec {
        #{$property}: $value;
      }
    }
    @else  {
      @warn "Unrecognized prefix: #{$prefix}";
    }
  }
}

@mixin disable-prefix-for-all() {
  $prefix-for-webkit:    false;
  $prefix-for-mozilla:   false;
  $prefix-for-microsoft: false;
  $prefix-for-opera:     false;
  $prefix-for-spec:      false;
}

@mixin keyframes($name) {
	$original-prefix-for-webkit:    $prefix-for-webkit;
	$original-prefix-for-mozilla:   $prefix-for-mozilla;
	$original-prefix-for-microsoft: $prefix-for-microsoft;
	$original-prefix-for-opera:     $prefix-for-opera;
	$original-prefix-for-spec:      $prefix-for-spec;

	@if $original-prefix-for-webkit {
		@include disable-prefix-for-all();
		$prefix-for-webkit: true;
		@-webkit-keyframes #{$name} {
			@content;
		}
	}
	@if $original-prefix-for-mozilla {
		@include disable-prefix-for-all();
		$prefix-for-mozilla: true;
		@-moz-keyframes #{$name} {
			@content;
		}
	}
	@if $original-prefix-for-spec {
		@include disable-prefix-for-all();
		$prefix-for-spec: true;
		@keyframes #{$name} {
			@content;
		}
	}

	$prefix-for-webkit:    $original-prefix-for-webkit;
	$prefix-for-mozilla:   $original-prefix-for-mozilla;
	$prefix-for-microsoft: $original-prefix-for-microsoft;
	$prefix-for-opera:     $original-prefix-for-opera;
	$prefix-for-spec:      $original-prefix-for-spec;
}

@mixin transform($property: none) {
	@include prefixer(transform, $property, webkit moz ms o spec);
}

@mixin animation($animations) {
	@include prefixer(animation, $animations, webkit moz spec);
}

@mixin box-sizing ($box) {
	@include prefixer(box-sizing, $box, webkit moz spec);
}

@mixin media($query) {
	$bp-laptop:     "(min-width: #{em(780px)})";
	$bp-laptop-max: "(max-width: #{em(780px)})";
	$bp-tablet:     "(min-width: #{em(500px)})";
	$bp-tablet-max: "(max-width: #{em(500px)})";
	$bp-menu:       "(min-width: #{$menu-width})";
	$bp-menu-max:   "(max-width: #{$menu-width})";
  
	@if $query == laptop {
	  @media #{$bp-laptop} { @content; }
	}
	@if $query == laptop-max {
	  @media #{$bp-laptop-max} { @content; }
	}
	@else if $query == tablet {
	  @media #{$bp-tablet} { @content; }
	}
	@else if $query == tablet-max {
	  @media #{$bp-tablet-max} { @content; }
	}
	@else if $query == menu {
	  @media #{$bp-menu} { @content; }
	}
	@else if $query == menu-max {
	  @media #{$bp-menu-max} { @content; }
	}
	@else {
		@media (#{$query}) { @content; }
	}
}